// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fysio.Migrations
{
    [DbContext(typeof(FysioDbContext))]
    [Migration("20211005215019_RemovedPasswordFromSomeTables")]
    partial class RemovedPasswordFromSomeTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.DomainModels.Patiëntdossier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Behandelingen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Behandelplan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumAanmelding")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumOntslag")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosOmschrijving")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnoseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoofdbehandelaarEmailaddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IntakeGedaanDoor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntakeOnderSupervisieVan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Klachten")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opmerkingen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysiotherapistEmailaddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentEmailaddress")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HoofdbehandelaarEmailaddress");

                    b.HasIndex("PhysiotherapistEmailaddress");

                    b.HasIndex("StudentEmailaddress");

                    b.ToTable("Patiëntdossiers");
                });

            modelBuilder.Entity("Domain.DomainModels.Person", b =>
                {
                    b.Property<string>("Emailaddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DayOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("Emailaddress");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Domain.DomainModels.Patient", b =>
                {
                    b.HasBaseType("Domain.DomainModels.Person");

                    b.Property<int>("Patiëntnumber")
                        .HasColumnType("int");

                    b.HasIndex("Patiëntnumber")
                        .IsUnique()
                        .HasFilter("[Patiëntnumber] IS NOT NULL");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("Domain.DomainModels.Physiotherapist", b =>
                {
                    b.HasBaseType("Domain.DomainModels.Person");

                    b.Property<int>("BIGNummer")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Physiotherapist");
                });

            modelBuilder.Entity("Domain.DomainModels.Student", b =>
                {
                    b.HasBaseType("Domain.DomainModels.Person");

                    b.Property<int>("Studentnumber")
                        .HasColumnType("int");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Domain.DomainModels.Teacher", b =>
                {
                    b.HasBaseType("Domain.DomainModels.Person");

                    b.Property<int>("StaffNumber")
                        .HasColumnType("int");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("Domain.DomainModels.Patiëntdossier", b =>
                {
                    b.HasOne("Domain.DomainModels.Physiotherapist", "Hoofdbehandelaar")
                        .WithMany()
                        .HasForeignKey("HoofdbehandelaarEmailaddress");

                    b.HasOne("Domain.DomainModels.Physiotherapist", "Physiotherapist")
                        .WithMany()
                        .HasForeignKey("PhysiotherapistEmailaddress");

                    b.HasOne("Domain.DomainModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentEmailaddress");

                    b.Navigation("Hoofdbehandelaar");

                    b.Navigation("Physiotherapist");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.DomainModels.Patient", b =>
                {
                    b.HasOne("Domain.DomainModels.Person", null)
                        .WithOne()
                        .HasForeignKey("Domain.DomainModels.Patient", "Emailaddress")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Domain.DomainModels.Patiëntdossier", "Patiëntdossier")
                        .WithOne("Patient")
                        .HasForeignKey("Domain.DomainModels.Patient", "Patiëntnumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patiëntdossier");
                });

            modelBuilder.Entity("Domain.DomainModels.Physiotherapist", b =>
                {
                    b.HasOne("Domain.DomainModels.Person", null)
                        .WithOne()
                        .HasForeignKey("Domain.DomainModels.Physiotherapist", "Emailaddress")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.DomainModels.Student", b =>
                {
                    b.HasOne("Domain.DomainModels.Person", null)
                        .WithOne()
                        .HasForeignKey("Domain.DomainModels.Student", "Emailaddress")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.DomainModels.Teacher", b =>
                {
                    b.HasOne("Domain.DomainModels.Person", null)
                        .WithOne()
                        .HasForeignKey("Domain.DomainModels.Teacher", "Emailaddress")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.DomainModels.Patiëntdossier", b =>
                {
                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
